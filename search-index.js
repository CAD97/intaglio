var searchIndex = JSON.parse('{\
"bstr":{"doc":"An experimental byte string library.","i":[[3,"BStr","bstr","A wrapper for `&[u8]` that provides convenient string…",null,null],[3,"Bytes","","An iterator over the bytes in a byte string.",null,null],[3,"Fields","","An iterator over the fields in a byte string, separated by…",null,null],[3,"FieldsWith","","An iterator over fields in the byte string, separated by a…",null,null],[3,"Find","","An iterator over non-overlapping substring matches.",null,null],[3,"FindReverse","","An iterator over non-overlapping substring matches in…",null,null],[3,"Finder","","A single substring searcher fixed to a particular needle.",null,null],[3,"FinderReverse","","A single substring reverse searcher fixed to a particular…",null,null],[3,"Lines","","An iterator over all lines in a byte string, without their…",null,null],[3,"LinesWithTerminator","","An iterator over all lines in a byte string, including…",null,null],[3,"Split","","An iterator over substrings in a byte string, split by a…",null,null],[3,"SplitN","","An iterator over at most `n` substrings in a byte string,…",null,null],[3,"SplitNReverse","","An iterator over at most `n` substrings in a byte string,…",null,null],[3,"SplitReverse","","An iterator over substrings in a byte string, split by a…",null,null],[3,"CharIndices","","An iterator over Unicode scalar values in a byte string…",null,null],[3,"Chars","","An iterator over Unicode scalar values in a byte string.",null,null],[3,"Utf8Chunk","","A chunk of valid UTF-8, possibly followed by invalid UTF-8…",null,null],[3,"Utf8Chunks","","An iterator over chunks of valid UTF-8 in a byte slice.",null,null],[3,"Utf8Error","","An error that occurs when UTF-8 decoding fails.",null,null],[5,"B","","A short-hand constructor for building a `&[u8]`.",null,[[]]],[5,"decode_utf8","","UTF-8 decode a single Unicode scalar value from the…",null,[[["asref",8]]]],[5,"decode_last_utf8","","UTF-8 decode a single Unicode scalar value from the end of…",null,[[["asref",8]]]],[11,"new","","Create a new finder for the given needle.",0,[[],["finder",3]]],[11,"needle","","Returns the needle that this finder searches for.",0,[[]]],[11,"find","","Returns the index of the first occurrence of this needle…",0,[[["asref",8]],["option",4]]],[11,"new","","Create a new reverse finder for the given needle.",1,[[],["finderreverse",3]]],[11,"needle","","Returns the needle that this finder searches for.",1,[[]]],[11,"rfind","","Returns the index of the last occurrence of this needle in…",1,[[["asref",8]],["option",4]]],[11,"as_bytes","","View the underlying data as a subslice of the original data.",2,[[]]],[11,"as_bytes","","View the underlying data as a subslice of the original data.",3,[[]]],[11,"valid","","Returns the (possibly empty) valid UTF-8 bytes in this…",4,[[]]],[11,"invalid","","Returns the (possibly empty) invalid UTF-8 bytes in this…",4,[[]]],[11,"valid_up_to","","Returns the byte index of the position immediately…",5,[[]]],[11,"error_len","","Returns the total number of invalid UTF-8 bytes…",5,[[],["option",4]]],[8,"ByteSlice","","A trait that extends `&[u8]` with string oriented methods.",null,null],[11,"as_bstr","","Return this byte slice as a `&BStr`.",6,[[],["bstr",3]]],[11,"as_bstr_mut","","Return this byte slice as a `&mut BStr`.",6,[[],["bstr",3]]],[11,"to_str","","Safely convert this byte string into a `&str` if it\'s…",6,[[],[["utf8error",3],["result",4]]]],[11,"to_str_unchecked","","Unsafely convert this byte string into a `&str`, without…",6,[[]]],[11,"contains_str","","Returns true if and only if this byte string contains the…",6,[[["asref",8]]]],[11,"starts_with_str","","Returns true if and only if this byte string has the given…",6,[[["asref",8]]]],[11,"ends_with_str","","Returns true if and only if this byte string has the given…",6,[[["asref",8]]]],[11,"find","","Returns the index of the first occurrence of the given…",6,[[["asref",8]],["option",4]]],[11,"rfind","","Returns the index of the last occurrence of the given…",6,[[["asref",8]],["option",4]]],[11,"find_iter","","Returns an iterator of the non-overlapping occurrences of…",6,[[],["find",3]]],[11,"rfind_iter","","Returns an iterator of the non-overlapping occurrences of…",6,[[],["findreverse",3]]],[11,"find_byte","","Returns the index of the first occurrence of the given…",6,[[],["option",4]]],[11,"rfind_byte","","Returns the index of the last occurrence of the given…",6,[[],["option",4]]],[11,"find_char","","Returns the index of the first occurrence of the given…",6,[[],["option",4]]],[11,"rfind_char","","Returns the index of the last occurrence of the given…",6,[[],["option",4]]],[11,"find_byteset","","Returns the index of the first occurrence of any of the…",6,[[["asref",8]],["option",4]]],[11,"find_not_byteset","","Returns the index of the first occurrence of a byte that…",6,[[["asref",8]],["option",4]]],[11,"rfind_byteset","","Returns the index of the last occurrence of any of the…",6,[[["asref",8]],["option",4]]],[11,"rfind_not_byteset","","Returns the index of the last occurrence of a byte that is…",6,[[["asref",8]],["option",4]]],[11,"fields","","Returns an iterator over the fields in a byte string,…",6,[[],["fields",3]]],[11,"fields_with","","Returns an iterator over the fields in a byte string,…",6,[[["fnmut",8]],[["fnmut",8],["fieldswith",3]]]],[11,"split_str","","Returns an iterator over substrings of this byte string,…",6,[[],["split",3]]],[11,"rsplit_str","","Returns an iterator over substrings of this byte string,…",6,[[],["splitreverse",3]]],[11,"splitn_str","","Returns an iterator of at most `limit` substrings of this…",6,[[],["splitn",3]]],[11,"rsplitn_str","","Returns an iterator of at most `limit` substrings of this…",6,[[],["splitnreverse",3]]],[11,"bytes","","Returns an iterator over the bytes in this byte string.",6,[[],["bytes",3]]],[11,"chars","","Returns an iterator over the Unicode scalar values in this…",6,[[],["chars",3]]],[11,"char_indices","","Returns an iterator over the Unicode scalar values in this…",6,[[],["charindices",3]]],[11,"utf8_chunks","","Iterate over chunks of valid UTF-8.",6,[[],["utf8chunks",3]]],[11,"lines","","An iterator over all lines in a byte string, without their…",6,[[],["lines",3]]],[11,"lines_with_terminator","","An iterator over all lines in a byte string, including…",6,[[],["lineswithterminator",3]]],[11,"trim_with","","Return a byte string slice with leading and trailing…",6,[[["fnmut",8]]]],[11,"trim_start_with","","Return a byte string slice with leading characters…",6,[[["fnmut",8]]]],[11,"trim_end_with","","Return a byte string slice with trailing characters…",6,[[["fnmut",8]]]],[11,"make_ascii_lowercase","","Convert this byte string to its lowercase ASCII equivalent…",6,[[]]],[11,"make_ascii_uppercase","","Convert this byte string to its uppercase ASCII equivalent…",6,[[]]],[11,"reverse_bytes","","Reverse the bytes in this string, in place.",6,[[]]],[11,"reverse_chars","","Reverse the codepoints in this string, in place.",6,[[]]],[11,"is_ascii","","Returns true if and only if every byte in this byte string…",6,[[]]],[11,"is_utf8","","Returns true if and only if the entire byte string is…",6,[[]]],[11,"last_byte","","Returns the last byte in this byte string, if it\'s…",6,[[],["option",4]]],[11,"find_non_ascii_byte","","Returns the index of the first non-ASCII byte in this byte…",6,[[],["option",4]]],[11,"copy_within_str","","Copies elements from one part of the slice to another part…",6,[[]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"to_string","","",7,[[],["string",3]]],[11,"from","","",8,[[]]],[11,"into_iter","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"into","","",8,[[]]],[11,"try_into","","",8,[[],["result",4]]],[11,"borrow","","",8,[[]]],[11,"borrow_mut","","",8,[[]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"to_owned","","",8,[[]]],[11,"clone_into","","",8,[[]]],[11,"from","","",9,[[]]],[11,"into_iter","","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"into","","",9,[[]]],[11,"try_into","","",9,[[],["result",4]]],[11,"borrow","","",9,[[]]],[11,"borrow_mut","","",9,[[]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"from","","",10,[[]]],[11,"into_iter","","",10,[[]]],[11,"try_from","","",10,[[],["result",4]]],[11,"into","","",10,[[]]],[11,"try_into","","",10,[[],["result",4]]],[11,"borrow","","",10,[[]]],[11,"borrow_mut","","",10,[[]]],[11,"type_id","","",10,[[],["typeid",3]]],[11,"from","","",11,[[]]],[11,"into_iter","","",11,[[]]],[11,"try_from","","",11,[[],["result",4]]],[11,"into","","",11,[[]]],[11,"try_into","","",11,[[],["result",4]]],[11,"borrow","","",11,[[]]],[11,"borrow_mut","","",11,[[]]],[11,"type_id","","",11,[[],["typeid",3]]],[11,"from","","",12,[[]]],[11,"into_iter","","",12,[[]]],[11,"try_from","","",12,[[],["result",4]]],[11,"into","","",12,[[]]],[11,"try_into","","",12,[[],["result",4]]],[11,"borrow","","",12,[[]]],[11,"borrow_mut","","",12,[[]]],[11,"type_id","","",12,[[],["typeid",3]]],[11,"from","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"into","","",0,[[]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"from","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"into","","",1,[[]]],[11,"try_into","","",1,[[],["result",4]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"from","","",13,[[]]],[11,"into_iter","","",13,[[]]],[11,"try_from","","",13,[[],["result",4]]],[11,"into","","",13,[[]]],[11,"try_into","","",13,[[],["result",4]]],[11,"borrow","","",13,[[]]],[11,"borrow_mut","","",13,[[]]],[11,"type_id","","",13,[[],["typeid",3]]],[11,"from","","",14,[[]]],[11,"into_iter","","",14,[[]]],[11,"try_from","","",14,[[],["result",4]]],[11,"into","","",14,[[]]],[11,"try_into","","",14,[[],["result",4]]],[11,"borrow","","",14,[[]]],[11,"borrow_mut","","",14,[[]]],[11,"type_id","","",14,[[],["typeid",3]]],[11,"from","","",15,[[]]],[11,"into_iter","","",15,[[]]],[11,"try_from","","",15,[[],["result",4]]],[11,"into","","",15,[[]]],[11,"try_into","","",15,[[],["result",4]]],[11,"borrow","","",15,[[]]],[11,"borrow_mut","","",15,[[]]],[11,"type_id","","",15,[[],["typeid",3]]],[11,"from","","",16,[[]]],[11,"into_iter","","",16,[[]]],[11,"try_from","","",16,[[],["result",4]]],[11,"into","","",16,[[]]],[11,"try_into","","",16,[[],["result",4]]],[11,"borrow","","",16,[[]]],[11,"borrow_mut","","",16,[[]]],[11,"type_id","","",16,[[],["typeid",3]]],[11,"from","","",17,[[]]],[11,"into_iter","","",17,[[]]],[11,"try_from","","",17,[[],["result",4]]],[11,"into","","",17,[[]]],[11,"try_into","","",17,[[],["result",4]]],[11,"borrow","","",17,[[]]],[11,"borrow_mut","","",17,[[]]],[11,"type_id","","",17,[[],["typeid",3]]],[11,"from","","",18,[[]]],[11,"into_iter","","",18,[[]]],[11,"try_from","","",18,[[],["result",4]]],[11,"into","","",18,[[]]],[11,"try_into","","",18,[[],["result",4]]],[11,"borrow","","",18,[[]]],[11,"borrow_mut","","",18,[[]]],[11,"type_id","","",18,[[],["typeid",3]]],[11,"from","","",3,[[]]],[11,"into_iter","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"into","","",3,[[]]],[11,"try_into","","",3,[[],["result",4]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"to_owned","","",3,[[]]],[11,"clone_into","","",3,[[]]],[11,"from","","",2,[[]]],[11,"into_iter","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"into","","",2,[[]]],[11,"try_into","","",2,[[],["result",4]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"to_owned","","",2,[[]]],[11,"clone_into","","",2,[[]]],[11,"from","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"into","","",4,[[]]],[11,"try_into","","",4,[[],["result",4]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"from","","",19,[[]]],[11,"into_iter","","",19,[[]]],[11,"try_from","","",19,[[],["result",4]]],[11,"into","","",19,[[]]],[11,"try_into","","",19,[[],["result",4]]],[11,"borrow","","",19,[[]]],[11,"borrow_mut","","",19,[[]]],[11,"type_id","","",19,[[],["typeid",3]]],[11,"to_owned","","",19,[[]]],[11,"clone_into","","",19,[[]]],[11,"from","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"into","","",5,[[]]],[11,"try_into","","",5,[[],["result",4]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"to_string","","",5,[[],["string",3]]],[11,"deref","","",7,[[]]],[11,"deref_mut","","",7,[[]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",11,[[["formatter",3]],["result",6]]],[11,"fmt","","",12,[[["formatter",3]],["result",6]]],[11,"fmt","","",8,[[["formatter",3]],["result",6]]],[11,"fmt","","",9,[[["formatter",3]],["result",6]]],[11,"fmt","","",10,[[["formatter",3]],["result",6]]],[11,"fmt","","",15,[[["formatter",3]],["result",6]]],[11,"fmt","","",18,[[["formatter",3]],["result",6]]],[11,"fmt","","",16,[[["formatter",3]],["result",6]]],[11,"fmt","","",17,[[["formatter",3]],["result",6]]],[11,"fmt","","",7,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","",3,[[["formatter",3]],["result",6]]],[11,"fmt","","",19,[[["formatter",3]],["result",6]]],[11,"fmt","","",5,[[["formatter",3]],["result",6]]],[11,"fmt","","",7,[[["formatter",3]],["result",6]]],[11,"fmt","","",5,[[["formatter",3]],["result",6]]],[11,"eq","","",7,[[["bstr",3]]]],[11,"eq","","",7,[[]]],[11,"eq","","",7,[[]]],[11,"eq","","",7,[[]]],[11,"eq","","",7,[[]]],[11,"eq","","",5,[[["utf8error",3]]]],[11,"ne","","",5,[[["utf8error",3]]]],[11,"cmp","","",7,[[["bstr",3]],["ordering",4]]],[11,"partial_cmp","","",7,[[["bstr",3]],[["ordering",4],["option",4]]]],[11,"partial_cmp","","",7,[[],[["ordering",4],["option",4]]]],[11,"partial_cmp","","",7,[[],[["ordering",4],["option",4]]]],[11,"partial_cmp","","",7,[[],[["ordering",4],["option",4]]]],[11,"partial_cmp","","",7,[[],[["ordering",4],["option",4]]]],[11,"index","","",7,[[]]],[11,"index","","",7,[[["rangefull",3]],["bstr",3]]],[11,"index","","",7,[[["range",3]],["bstr",3]]],[11,"index","","",7,[[["rangeinclusive",3]],["bstr",3]]],[11,"index","","",7,[[["rangefrom",3]],["bstr",3]]],[11,"index","","",7,[[["rangeto",3]],["bstr",3]]],[11,"index","","",7,[[["rangetoinclusive",3]],["bstr",3]]],[11,"index_mut","","",7,[[]]],[11,"index_mut","","",7,[[["rangefull",3]],["bstr",3]]],[11,"index_mut","","",7,[[["range",3]],["bstr",3]]],[11,"index_mut","","",7,[[["rangeinclusive",3]],["bstr",3]]],[11,"index_mut","","",7,[[["rangefrom",3]],["bstr",3]]],[11,"index_mut","","",7,[[["rangeto",3]],["bstr",3]]],[11,"index_mut","","",7,[[["rangetoinclusive",3]],["bstr",3]]],[11,"hash","","",7,[[]]],[11,"next","","",11,[[],["option",4]]],[11,"next","","",12,[[],["option",4]]],[11,"next","","",8,[[],["option",4]]],[11,"next","","",9,[[],["option",4]]],[11,"next","","",10,[[],["option",4]]],[11,"next","","",15,[[],["option",4]]],[11,"next","","",18,[[],["option",4]]],[11,"next","","",16,[[],["option",4]]],[11,"next","","",17,[[],["option",4]]],[11,"next","","",13,[[],["option",4]]],[11,"next","","",14,[[],["option",4]]],[11,"next","","",2,[[],["option",4]]],[11,"next","","",3,[[],["option",4]]],[11,"next","","",19,[[],[["utf8chunk",3],["option",4]]]],[11,"size_hint","","",19,[[]]],[11,"next_back","","",8,[[],["option",4]]],[11,"next_back","","",2,[[],["option",4]]],[11,"next_back","","",3,[[],["option",4]]],[11,"len","","",8,[[]]],[11,"as_ref","","",7,[[]]],[11,"as_mut","","",7,[[]]],[11,"clone","","",0,[[],["finder",3]]],[11,"clone","","",1,[[],["finderreverse",3]]],[11,"clone","","",8,[[],["bytes",3]]],[11,"clone","","",2,[[],["chars",3]]],[11,"clone","","",3,[[],["charindices",3]]],[11,"clone","","",19,[[],["utf8chunks",3]]],[11,"as_bstr","","Return this byte slice as a `&BStr`.",6,[[],["bstr",3]]],[11,"as_bstr_mut","","Return this byte slice as a `&mut BStr`.",6,[[],["bstr",3]]],[11,"to_str","","Safely convert this byte string into a `&str` if it\'s…",6,[[],[["utf8error",3],["result",4]]]],[11,"to_str_unchecked","","Unsafely convert this byte string into a `&str`, without…",6,[[]]],[11,"contains_str","","Returns true if and only if this byte string contains the…",6,[[["asref",8]]]],[11,"starts_with_str","","Returns true if and only if this byte string has the given…",6,[[["asref",8]]]],[11,"ends_with_str","","Returns true if and only if this byte string has the given…",6,[[["asref",8]]]],[11,"find","","Returns the index of the first occurrence of the given…",6,[[["asref",8]],["option",4]]],[11,"rfind","","Returns the index of the last occurrence of the given…",6,[[["asref",8]],["option",4]]],[11,"find_iter","","Returns an iterator of the non-overlapping occurrences of…",6,[[],["find",3]]],[11,"rfind_iter","","Returns an iterator of the non-overlapping occurrences of…",6,[[],["findreverse",3]]],[11,"find_byte","","Returns the index of the first occurrence of the given…",6,[[],["option",4]]],[11,"rfind_byte","","Returns the index of the last occurrence of the given…",6,[[],["option",4]]],[11,"find_char","","Returns the index of the first occurrence of the given…",6,[[],["option",4]]],[11,"rfind_char","","Returns the index of the last occurrence of the given…",6,[[],["option",4]]],[11,"find_byteset","","Returns the index of the first occurrence of any of the…",6,[[["asref",8]],["option",4]]],[11,"find_not_byteset","","Returns the index of the first occurrence of a byte that…",6,[[["asref",8]],["option",4]]],[11,"rfind_byteset","","Returns the index of the last occurrence of any of the…",6,[[["asref",8]],["option",4]]],[11,"rfind_not_byteset","","Returns the index of the last occurrence of a byte that is…",6,[[["asref",8]],["option",4]]],[11,"fields","","Returns an iterator over the fields in a byte string,…",6,[[],["fields",3]]],[11,"fields_with","","Returns an iterator over the fields in a byte string,…",6,[[["fnmut",8]],[["fnmut",8],["fieldswith",3]]]],[11,"split_str","","Returns an iterator over substrings of this byte string,…",6,[[],["split",3]]],[11,"rsplit_str","","Returns an iterator over substrings of this byte string,…",6,[[],["splitreverse",3]]],[11,"splitn_str","","Returns an iterator of at most `limit` substrings of this…",6,[[],["splitn",3]]],[11,"rsplitn_str","","Returns an iterator of at most `limit` substrings of this…",6,[[],["splitnreverse",3]]],[11,"bytes","","Returns an iterator over the bytes in this byte string.",6,[[],["bytes",3]]],[11,"chars","","Returns an iterator over the Unicode scalar values in this…",6,[[],["chars",3]]],[11,"char_indices","","Returns an iterator over the Unicode scalar values in this…",6,[[],["charindices",3]]],[11,"utf8_chunks","","Iterate over chunks of valid UTF-8.",6,[[],["utf8chunks",3]]],[11,"lines","","An iterator over all lines in a byte string, without their…",6,[[],["lines",3]]],[11,"lines_with_terminator","","An iterator over all lines in a byte string, including…",6,[[],["lineswithterminator",3]]],[11,"trim_with","","Return a byte string slice with leading and trailing…",6,[[["fnmut",8]]]],[11,"trim_start_with","","Return a byte string slice with leading characters…",6,[[["fnmut",8]]]],[11,"trim_end_with","","Return a byte string slice with trailing characters…",6,[[["fnmut",8]]]],[11,"make_ascii_lowercase","","Convert this byte string to its lowercase ASCII equivalent…",6,[[]]],[11,"make_ascii_uppercase","","Convert this byte string to its uppercase ASCII equivalent…",6,[[]]],[11,"reverse_bytes","","Reverse the bytes in this string, in place.",6,[[]]],[11,"reverse_chars","","Reverse the codepoints in this string, in place.",6,[[]]],[11,"is_ascii","","Returns true if and only if every byte in this byte string…",6,[[]]],[11,"is_utf8","","Returns true if and only if the entire byte string is…",6,[[]]],[11,"last_byte","","Returns the last byte in this byte string, if it\'s…",6,[[],["option",4]]],[11,"find_non_ascii_byte","","Returns the index of the first non-ASCII byte in this byte…",6,[[],["option",4]]],[11,"copy_within_str","","Copies elements from one part of the slice to another part…",6,[[]]]],"p":[[3,"Finder"],[3,"FinderReverse"],[3,"Chars"],[3,"CharIndices"],[3,"Utf8Chunk"],[3,"Utf8Error"],[8,"ByteSlice"],[3,"BStr"],[3,"Bytes"],[3,"Fields"],[3,"FieldsWith"],[3,"Find"],[3,"FindReverse"],[3,"Lines"],[3,"LinesWithTerminator"],[3,"Split"],[3,"SplitN"],[3,"SplitNReverse"],[3,"SplitReverse"],[3,"Utf8Chunks"]]},\
"intaglio":{"doc":"Intaglio","i":[[3,"SymbolIdOverflowError","intaglio","Error returned when a [`SymbolTable`] or symbol identifier…",null,null],[3,"SymbolId","","Identifier bound to an interned bytestring.",null,null],[3,"AllSymbols","","An iterator over all [`SymbolId`]s in a [`SymbolTable`].",null,null],[3,"Bytestrings","","An iterator over all interned bytestrings in a…",null,null],[3,"Iter","","An iterator over all symbols and interned bytestrings in a…",null,null],[3,"SymbolTable","","Byte string interner.",null,null],[0,"str","","An intaglio interner for UTF-8 strings. `str` module is a…",null,null],[3,"AllSymbols","intaglio::str","An iterator over all [`SymbolId`]s in a [`SymbolTable`].",null,null],[3,"Strings","","An iterator over all interned strings in a [`SymbolTable`].",null,null],[3,"Iter","","An iterator over all symbols and interned strings in a…",null,null],[3,"SymbolTable","","UTF-8 string interner.",null,null],[11,"new","","Constructs a new, empty `SymbolTable` with default capacity.",0,[[]]],[11,"with_capacity","","Constructs a new, empty `SymbolTable` with the specified…",0,[[]]],[11,"with_hasher","","Constructs a new, empty `SymbolTable` with default…",0,[[]]],[11,"with_capacity_and_hasher","","Constructs a new, empty `SymbolTable` with the specified…",0,[[]]],[11,"capacity","","Returns the number of bytestrings the table can hold…",0,[[]]],[11,"len","","Returns the number of interned bytestrings in the table.",0,[[]]],[11,"is_empty","","Returns `true` if the symbol table contains no interned…",0,[[]]],[11,"contains","","Returns `true` if the symbol table contains the given…",0,[[["symbolid",3]]]],[11,"get","","Returns a reference to the byte string associated with the…",0,[[["symbolid",3]],["option",4]]],[11,"iter","","Returns an iterator over all [`SymbolId`]s and bytestrings…",0,[[],["iter",3]]],[11,"all_symbols","","Returns an iterator over all [`SymbolId`]s in the…",0,[[],["allsymbols",3]]],[11,"strings","","Returns an iterator over all strings in the [`SymbolTable`].",0,[[],["strings",3]]],[11,"intern","","Intern a bytestring for the lifetime of the symbol table.",0,[[],[["symbolidoverflowerror",3],["result",4],["symbolid",3]]]],[11,"is_interned","","Returns `true` if the given byte string has been interned…",0,[[]]],[11,"reserve","","Reserves capacity for at least additional more elements to…",0,[[]]],[11,"shrink_to_fit","","Shrinks the capacity of the symbol table as much as…",0,[[]]],[17,"DEFAULT_SYMBOL_TABLE_CAPACITY","intaglio","Default capacity for new a [`SymbolTable`].",null,null],[11,"max_capacity","","Return the maximum capacity of the [`SymbolTable`] that…",1,[[]]],[11,"new","","Construct a new `SymbolId` from the given `u32`.",2,[[]]],[11,"new","","Constructs a new, empty `SymbolTable` with default capacity.",3,[[]]],[11,"with_capacity","","Constructs a new, empty `SymbolTable` with the specified…",3,[[]]],[11,"with_hasher","","Constructs a new, empty `SymbolTable` with default…",3,[[]]],[11,"with_capacity_and_hasher","","Constructs a new, empty `SymbolTable` with the specified…",3,[[]]],[11,"capacity","","Returns the number of bytestrings the table can hold…",3,[[]]],[11,"len","","Returns the number of interned bytestrings in the table.",3,[[]]],[11,"is_empty","","Returns `true` if the symbol table contains no interned…",3,[[]]],[11,"contains","","Returns `true` if the symbol table contains the given…",3,[[["symbolid",3]]]],[11,"get","","Returns a reference to the byte string associated with the…",3,[[["symbolid",3]],["option",4]]],[11,"iter","","Returns an iterator over all [`SymbolId`]s and bytestrings…",3,[[],["iter",3]]],[11,"all_symbols","","Returns an iterator over all [`SymbolId`]s in the…",3,[[],["allsymbols",3]]],[11,"bytestrings","","Returns an iterator over all bytestrings in the…",3,[[],["bytestrings",3]]],[11,"intern","","Intern a bytestring for the lifetime of the symbol table.",3,[[],[["symbolidoverflowerror",3],["result",4],["symbolid",3]]]],[11,"is_interned","","Returns `true` if the given byte string has been interned…",3,[[]]],[11,"reserve","","Reserves capacity for at least additional more elements to…",3,[[]]],[11,"shrink_to_fit","","Shrinks the capacity of the symbol table as much as…",3,[[]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"to_string","","",1,[[],["string",3]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"to_owned","","",2,[[]]],[11,"clone_into","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"into_iter","","",4,[[]]],[11,"to_owned","","",4,[[]]],[11,"clone_into","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"from","","",5,[[]]],[11,"into","","",5,[[]]],[11,"into_iter","","",5,[[]]],[11,"to_owned","","",5,[[]]],[11,"clone_into","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"from","","",6,[[]]],[11,"into","","",6,[[]]],[11,"into_iter","","",6,[[]]],[11,"to_owned","","",6,[[]]],[11,"clone_into","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"from","intaglio::str","",7,[[]]],[11,"into","","",7,[[]]],[11,"into_iter","","",7,[[]]],[11,"to_owned","","",7,[[]]],[11,"clone_into","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"from","","",8,[[]]],[11,"into","","",8,[[]]],[11,"into_iter","","",8,[[]]],[11,"to_owned","","",8,[[]]],[11,"clone_into","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"try_into","","",8,[[],["result",4]]],[11,"borrow","","",8,[[]]],[11,"borrow_mut","","",8,[[]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"from","","",9,[[]]],[11,"into","","",9,[[]]],[11,"into_iter","","",9,[[]]],[11,"to_owned","","",9,[[]]],[11,"clone_into","","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"try_into","","",9,[[],["result",4]]],[11,"borrow","","",9,[[]]],[11,"borrow_mut","","",9,[[]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","intaglio","",1,[[["tryfrominterror",3]]]],[11,"from","","",2,[[]]],[11,"from","","",2,[[["nonzerou8",3]]]],[11,"from","","",2,[[]]],[11,"from","","",2,[[["nonzerou16",3]]]],[11,"from","","",2,[[]]],[11,"from","","",2,[[["nonzerou32",3]]]],[11,"next_back","intaglio::str","",7,[[],["option",4]]],[11,"nth_back","","",7,[[],["option",4]]],[11,"next_back","","",8,[[],["option",4]]],[11,"nth_back","","",8,[[],["option",4]]],[11,"rfold","","",8,[[]]],[11,"next_back","intaglio","",4,[[],["option",4]]],[11,"nth_back","","",4,[[],["option",4]]],[11,"next_back","","",5,[[],["option",4]]],[11,"nth_back","","",5,[[],["option",4]]],[11,"rfold","","",5,[[]]],[11,"len","intaglio::str","",8,[[]]],[11,"len","intaglio","",5,[[]]],[11,"next","intaglio::str","",7,[[],["option",4]]],[11,"size_hint","","",7,[[]]],[11,"count","","",7,[[]]],[11,"last","","",7,[[],["option",4]]],[11,"nth","","",7,[[],["option",4]]],[11,"collect","","",7,[[],["fromiterator",8]]],[11,"next","","",8,[[],["option",4]]],[11,"size_hint","","",8,[[]]],[11,"count","","",8,[[]]],[11,"last","","",8,[[],["option",4]]],[11,"nth","","",8,[[],["option",4]]],[11,"collect","","",8,[[],["fromiterator",8]]],[11,"next","","",9,[[],["option",4]]],[11,"size_hint","","",9,[[]]],[11,"count","","",9,[[]]],[11,"last","","",9,[[],["option",4]]],[11,"nth","","",9,[[],["option",4]]],[11,"collect","","",9,[[],["fromiterator",8]]],[11,"next","intaglio","",4,[[],["option",4]]],[11,"size_hint","","",4,[[]]],[11,"count","","",4,[[]]],[11,"last","","",4,[[],["option",4]]],[11,"nth","","",4,[[],["option",4]]],[11,"collect","","",4,[[],["fromiterator",8]]],[11,"next","","",5,[[],["option",4]]],[11,"size_hint","","",5,[[]]],[11,"count","","",5,[[]]],[11,"last","","",5,[[],["option",4]]],[11,"nth","","",5,[[],["option",4]]],[11,"collect","","",5,[[],["fromiterator",8]]],[11,"next","","",6,[[],["option",4]]],[11,"size_hint","","",6,[[]]],[11,"count","","",6,[[]]],[11,"last","","",6,[[],["option",4]]],[11,"nth","","",6,[[],["option",4]]],[11,"collect","","",6,[[],["fromiterator",8]]],[11,"clone","intaglio::str","",7,[[],["allsymbols",3]]],[11,"clone","","",8,[[],["strings",3]]],[11,"clone","","",9,[[],["iter",3]]],[11,"clone","intaglio","",1,[[],["symbolidoverflowerror",3]]],[11,"clone","","",2,[[],["symbolid",3]]],[11,"clone","","",4,[[],["allsymbols",3]]],[11,"clone","","",5,[[],["bytestrings",3]]],[11,"clone","","",6,[[],["iter",3]]],[11,"default","intaglio::str","",0,[[],["symboltable",3]]],[11,"default","intaglio","",3,[[],["symboltable",3]]],[11,"cmp","","",2,[[["symbolid",3]],["ordering",4]]],[11,"eq","intaglio::str","",7,[[["allsymbols",3]]]],[11,"ne","","",7,[[["allsymbols",3]]]],[11,"eq","intaglio","",1,[[["symbolidoverflowerror",3]]]],[11,"ne","","",1,[[["symbolidoverflowerror",3]]]],[11,"eq","","",2,[[["symbolid",3]]]],[11,"ne","","",2,[[["symbolid",3]]]],[11,"eq","","",4,[[["allsymbols",3]]]],[11,"ne","","",4,[[["allsymbols",3]]]],[11,"partial_cmp","","",2,[[["symbolid",3]],[["ordering",4],["option",4]]]],[11,"lt","","",2,[[["symbolid",3]]]],[11,"le","","",2,[[["symbolid",3]]]],[11,"gt","","",2,[[["symbolid",3]]]],[11,"ge","","",2,[[["symbolid",3]]]],[11,"fmt","intaglio::str","",7,[[["formatter",3]],["result",6]]],[11,"fmt","","",8,[[["formatter",3]],["result",6]]],[11,"fmt","","",9,[[["formatter",3]],["result",6]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","intaglio","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","",4,[[["formatter",3]],["result",6]]],[11,"fmt","","",5,[[["formatter",3]],["result",6]]],[11,"fmt","","",6,[[["formatter",3]],["result",6]]],[11,"fmt","","",3,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"hash","intaglio::str","",7,[[]]],[11,"hash","intaglio","",2,[[]]],[11,"hash","","",4,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_from","","",2,[[["nonzerou64",3]],["result",4]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_from","","",2,[[["nonzerousize",3]],["result",4]]],[11,"source","","",1,[[],[["option",4],["error",8]]]]],"p":[[3,"SymbolTable"],[3,"SymbolIdOverflowError"],[3,"SymbolId"],[3,"SymbolTable"],[3,"AllSymbols"],[3,"Bytestrings"],[3,"Iter"],[3,"AllSymbols"],[3,"Strings"],[3,"Iter"]]},\
"memchr":{"doc":"The `memchr` crate provides heavily optimized routines for…","i":[[3,"Memchr","memchr","An iterator for `memchr`.",null,null],[3,"Memchr2","","An iterator for `memchr2`.",null,null],[3,"Memchr3","","An iterator for `memchr3`.",null,null],[5,"memchr_iter","","An iterator over all occurrences of the needle in a…",null,[[],["memchr",3]]],[5,"memchr2_iter","","An iterator over all occurrences of the needles in a…",null,[[],["memchr2",3]]],[5,"memchr3_iter","","An iterator over all occurrences of the needles in a…",null,[[],["memchr3",3]]],[5,"memrchr_iter","","An iterator over all occurrences of the needle in a…",null,[[],[["memchr",3],["rev",3]]]],[5,"memrchr2_iter","","An iterator over all occurrences of the needles in a…",null,[[],[["memchr2",3],["rev",3]]]],[5,"memrchr3_iter","","An iterator over all occurrences of the needles in a…",null,[[],[["rev",3],["memchr3",3]]]],[5,"memchr","","Search for the first occurrence of a byte in a slice.",null,[[],["option",4]]],[5,"memchr2","","Like `memchr`, but searches for either of two bytes…",null,[[],["option",4]]],[5,"memchr3","","Like `memchr`, but searches for any of three bytes instead…",null,[[],["option",4]]],[5,"memrchr","","Search for the last occurrence of a byte in a slice.",null,[[],["option",4]]],[5,"memrchr2","","Like `memrchr`, but searches for either of two bytes…",null,[[],["option",4]]],[5,"memrchr3","","Like `memrchr`, but searches for any of three bytes…",null,[[],["option",4]]],[11,"new","","Creates a new iterator that yields all positions of needle…",0,[[],["memchr",3]]],[11,"new","","Creates a new iterator that yields all positions of needle…",1,[[],["memchr2",3]]],[11,"new","","Create a new `Memchr3` that\'s initialized to zero with a…",2,[[],["memchr3",3]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"into_iter","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"into_iter","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"into_iter","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"next_back","","",0,[[],["option",4]]],[11,"next_back","","",1,[[],["option",4]]],[11,"next_back","","",2,[[],["option",4]]],[11,"next","","",0,[[],["option",4]]],[11,"size_hint","","",0,[[]]],[11,"next","","",1,[[],["option",4]]],[11,"size_hint","","",1,[[]]],[11,"next","","",2,[[],["option",4]]],[11,"size_hint","","",2,[[]]]],"p":[[3,"Memchr"],[3,"Memchr2"],[3,"Memchr3"]]}\
}');
addSearchOptions(searchIndex);initSearch(searchIndex);